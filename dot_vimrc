set mouse=a
set nu
" Sets how many lines of history VIM has to remember
set history=500
set cc=100
" Enable filetype plugins
filetype plugin on
filetype indent on

imap jj <ESC>
nmap ; .

call plug#begin()
"colorschemes
Plug 'flazz/vim-colorschemes'
Plug 'mhartington/oceanic-next'
"monitor
Plug 'dstein64/vim-startuptime'
"dashboard
Plug 'preservim/nerdtree'
nmap <C-b> :NERDTreeToggle<CR>

"status bar
Plug 'vim-airline/vim-airline'
"change brackets : cs
Plug 'tpope/vim-surround'
"autocomplete brackets
"Plug 'raimondi/delimitmate'
"autocomplete
Plug 'Shougo/deoplete.nvim'
let g:deoplete#enable_at_startup = 1

"buffer management
Plug 'jlanzarotta/bufexplorer'
nnoremap <silent> ¬≤ :bn<CR>
nnoremap <silent> <C-¬≤> :BufExplorer<CR>

"Commenting
Plug 'tpope/vim-commentary'
vmap <C-a> : Commentary<CR>
nmap <C-a> : Commentary<CR>

Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
"lsp
Plug 'dense-analysis/ale'
"git display in sidebar
Plug 'airblade/vim-gitgutter'
"fuzzy file finder
Plug 'ctrlpvim/ctrlp.vim'
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

"typst
Plug 'kaarmu/typst.vim'
"tmux navigation
Plug 'christoomey/vim-tmux-navigator'
"keep last
Plug 'ryanoasis/vim-devicons'
call plug#end()

let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {} " needed
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['ml'] = 'üê´'
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['tex'] = 'üñ∫'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#ale#enabled = 1

inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

let g:ale_sign_error                  = '‚úò'
let g:ale_sign_warning                = '‚ö†'
highlight ALEError cterm=underline
let g:ale_hover_to_floating_preview = 1

let g:ale_fixers = {
\   'ocaml':      ['ocamlformat'],
\   'tex':        ['latexindent'],
\   '*':          ['remove_trailing_lines', 'trim_whitespace'],
\}
let g:ale_linters = {
\ 'ocaml': ['ocamllsp'],
\'tex': ['texlab'],
\}

call ale#Set('tex_texlab_config',{"rootDirectory" : "/",})
nmap K :ALEHover<CR>
nmap F :ALEFix<CR>
" Use ALE and also some plugin 'foobar' as completion sources for all code.
call deoplete#custom#option('sources', {
\ '_': ['ale'],
\})



" :W sudo saves the file
" (useful for handling the permission-denied error)
command! W execute 'w !sudo tee % > /dev/null' <bar> edit!
" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
	set wildignore+=.git\*,.hg\*,.svn\*
else
	set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

" Always show current position
set ruler

" Height of the command bar
set cmdheight=1


" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch

" How many tenths of a second to blink when matching brackets
set mat=2

set smartindent

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable
syntax on

" Set regular expression engine automatically
set regexpengine=0

"try
"	colorscheme  OceanicNext
"catch
"endtry

set background=dark

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac


"PLUGINS
"Install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
	silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
				\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

"Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
			\| PlugInstall --sync | source $MYVIMRC
			\| endif
